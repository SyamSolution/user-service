// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/user-service/internal/usecase/user_usecase.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/user-service/internal/usecase/user_usecase.go -destination=D:/golang/src/telkomsel/ticket/user-service/mock/internal/user_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/user-service/internal/model"
	cognitoidentityprovider "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	gomock "go.uber.org/mock/gomock"
)

// MockUserExecutor is a mock of UserExecutor interface.
type MockUserExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockUserExecutorMockRecorder
}

// MockUserExecutorMockRecorder is the mock recorder for MockUserExecutor.
type MockUserExecutorMockRecorder struct {
	mock *MockUserExecutor
}

// NewMockUserExecutor creates a new mock instance.
func NewMockUserExecutor(ctrl *gomock.Controller) *MockUserExecutor {
	mock := &MockUserExecutor{ctrl: ctrl}
	mock.recorder = &MockUserExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserExecutor) EXPECT() *MockUserExecutorMockRecorder {
	return m.recorder
}

// ConfirmUser mocks base method.
func (m *MockUserExecutor) ConfirmUser(user model.ConfirmCode) (error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmUser", user)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ConfirmUser indicates an expected call of ConfirmUser.
func (mr *MockUserExecutorMockRecorder) ConfirmUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmUser", reflect.TypeOf((*MockUserExecutor)(nil).ConfirmUser), user)
}

// CreateUser mocks base method.
func (m *MockUserExecutor) CreateUser(user model.UserRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserExecutorMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserExecutor)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockUserExecutor) GetUserByEmail(email string) (model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserExecutorMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserExecutor)(nil).GetUserByEmail), email)
}

// LoginUser mocks base method.
func (m *MockUserExecutor) LoginUser(user model.SignIn) (error, string, *cognitoidentityprovider.InitiateAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", user)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*cognitoidentityprovider.InitiateAuthOutput)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserExecutorMockRecorder) LoginUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserExecutor)(nil).LoginUser), user)
}

// RefreshToken mocks base method.
func (m *MockUserExecutor) RefreshToken(refreshToken string) (error, string, *cognitoidentityprovider.InitiateAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*cognitoidentityprovider.InitiateAuthOutput)
	return ret0, ret1, ret2
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUserExecutorMockRecorder) RefreshToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUserExecutor)(nil).RefreshToken), refreshToken)
}
