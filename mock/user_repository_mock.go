// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golang/src/telkomsel/ticket/user-service/internal/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=D:/golang/src/telkomsel/ticket/user-service/internal/repository/user_repository.go -destination=D:/golang/src/telkomsel/ticket/user-service/mock/user_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/SyamSolution/user-service/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserPersister is a mock of UserPersister interface.
type MockUserPersister struct {
	ctrl     *gomock.Controller
	recorder *MockUserPersisterMockRecorder
}

// MockUserPersisterMockRecorder is the mock recorder for MockUserPersister.
type MockUserPersisterMockRecorder struct {
	mock *MockUserPersister
}

// NewMockUserPersister creates a new mock instance.
func NewMockUserPersister(ctrl *gomock.Controller) *MockUserPersister {
	mock := &MockUserPersister{ctrl: ctrl}
	mock.recorder = &MockUserPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPersister) EXPECT() *MockUserPersisterMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserPersister) CreateUser(user model.UserRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserPersisterMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserPersister)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockUserPersister) GetUserByEmail(email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserPersisterMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserPersister)(nil).GetUserByEmail), email)
}
